"""
Componente MesasArea - Área de visualización y gestión de mesas
Versión: v0.0.13
"""

import logging
from typing import List, Optional, Callable, Dict
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGridLayout,
                            QLabel, QFrame, QScrollArea, QPushButton, QLineEdit, QComboBox,
                            QMenu, QMessageBox, QInputDialog)
from PyQt6.QtCore import Qt, QTimer, pyqtSignal
from PyQt6.QtGui import QAction

from services.tpv_service import Mesa, TPVService
from ..widgets.mesa_widget_simple import MesaWidget

logger = logging.getLogger(__name__)


class MesasArea(QFrame):
    """Área de visualización y gestión de mesas"""

    # Señales
    mesa_clicked = pyqtSignal(Mesa)
    nueva_mesa_requested = pyqtSignal()
    nueva_mesa_con_zona_requested = pyqtSignal(int, int, str)  # número, capacidad, zona
    eliminar_mesa_requested = pyqtSignal(int)  # Emite el ID de la mesa a eliminar

    def __init__(self, tpv_service: Optional[TPVService] = None, parent=None):
        super().__init__(parent)
        self.tpv_service = tpv_service
        self.mesas: List[Mesa] = []
        self.filtered_mesas: List[Mesa] = []
        self.mesa_widgets: List[MesaWidget] = []
        self._datos_temporales = {}  # {id_mesa: {'nombre': str, 'personas': int}}
        self.current_zone_filter = "Todas"
        self.current_status_filter = "Todos"
        self.view_mode = "grid"
        self.setup_ui()

    def set_service(self, tpv_service: TPVService):
        """Establece el servicio TPV"""
        self.tpv_service = tpv_service

    def setup_ui(self):
        """Configura la interfaz del área de mesas"""
        self.setStyleSheet("""
            QFrame {
                background-color: #ffffff;
                border: 1px solid #e0e6ed;
                border-radius: 12px;
                margin: 4px;
            }
        """)

        container_layout = QVBoxLayout(self)
        container_layout.setContentsMargins(16, 16, 16, 16)
        container_layout.setSpacing(16)

        # Header del área de mesas
        self.create_header(container_layout)
          # Separador
        # Eliminado: No añadir separadores visuales antiguos
          # Área de scroll para las mesas
        self.create_scroll_area(container_layout)

    def create_header(self, layout: QVBoxLayout):
        """🏆 ULTRA-PREMIUM HEADER - Usar componente refactorizado mesas_area_header"""
        from .mesas_area.mesas_area_header import create_header
        create_header(self, self, layout)

    def create_scroll_area(self, layout: QVBoxLayout):
        """Crea el área de scroll para las mesas"""
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        self.scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: #fafbfc;
                border-radius: 8px;
            }
            QScrollBar:vertical {
                background-color: #f1f3f4;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background-color: #bdc3c7;
                border-radius: 6px;
                margin: 2px;
            }
            QScrollBar::handle:vertical:hover {
                background-color: #95a5a6;
            }
        """)

        # Container para las mesas con padding
        mesas_container = QWidget()
        mesas_container.setStyleSheet("""
            QWidget {
                background-color: #fafbfc;
                border-radius: 8px;
            }
        """)

        self.mesas_layout = QGridLayout(mesas_container)
        self.mesas_layout.setSpacing(20)
        self.mesas_layout.setContentsMargins(20, 20, 20, 20)
        self.mesas_layout.setAlignment(Qt.AlignmentFlag.AlignTop | Qt.AlignmentFlag.AlignLeft)

        self.scroll_area.setWidget(mesas_container)
        layout.addWidget(self.scroll_area, 1)
    def create_compact_stats(self, layout: QHBoxLayout):
        """Crea las estadísticas compactas integradas en el header"""
        from PyQt6.QtGui import QFont

        # Separador visual antes de las estadísticas
        separator = QLabel("|")
        separator.setStyleSheet("color: #d1d5db; font-size: 14px; margin: 0px 8px;")
        layout.addWidget(separator)

        # Estadísticas compactas
        stats_config = [
            ("📍", "Zonas", "0", "#10b981"),
            ("🍽️", "Total", "0", "#2563eb"),
            ("🟢", "Libres", "0", "#059669"),
            ("🔴", "Ocupadas", "0", "#dc2626")
        ]

        # Almacenar referencias para actualización
        self.stats_widgets = []

        for icon, label, value, color in stats_config:
            stat_widget = self.create_compact_stat_widget(icon, label, value, color)
            self.stats_widgets.append({
                'widget': stat_widget,
                'type': label.lower(),
                'icon': icon,
                'label': label
            })
            layout.addWidget(stat_widget)

    def create_compact_stat_widget(self, icon: str, label: str, value: str, color: str) -> QWidget:
        """Crea un widget de estadística compacta para el header"""
        from PyQt6.QtWidgets import QFrame, QVBoxLayout, QLabel
        from PyQt6.QtCore import Qt
        from PyQt6.QtGui import QFont

        # Frame principal
        stat_widget = QFrame()
        stat_widget.setFrameStyle(QFrame.Shape.StyledPanel)
        stat_widget.setLineWidth(1)

        # Layout vertical
        layout = QVBoxLayout(stat_widget)
        layout.setContentsMargins(8, 4, 8, 4)
        layout.setSpacing(2)

        # Etiqueta superior (título)
        label_widget = QLabel(f"{icon} {label}")
        label_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title_font = QFont()
        title_font.setPointSize(8)
        title_font.setBold(False)
        label_widget.setFont(title_font)
        label_widget.setStyleSheet("color: #64748b; margin: 0px; padding: 0px;")
        layout.addWidget(label_widget)

        # Valor inferior (destacado)
        value_widget = QLabel(value)
        value_widget.setAlignment(Qt.AlignmentFlag.AlignCenter)
        value_font = QFont()
        value_font.setPointSize(14)
        value_font.setBold(True)
        value_widget.setFont(value_font)
        value_widget.setStyleSheet(f"color: {color}; margin: 0px; padding: 0px;")
        layout.addWidget(value_widget)

        # Estilo del frame contenedor
        stat_widget.setStyleSheet(f"""
            QFrame {{
                background-color: white;
                border: 1px solid #e2e8f0;
                border-radius: 6px;
                margin: 0px 2px;
            }}
            QFrame:hover {{
                border-color: {color};
            }}
        """)

        # Tamaño compacto para el header
        stat_widget.setFixedSize(65, 40)

        return stat_widget

    def update_compact_stats(self, zonas: int, total: int, libres: int, ocupadas: int):
        """Actualiza las estadísticas compactas"""
        if not hasattr(self, 'stats_widgets'):
            return

        values = {
            'zonas': str(zonas),
            'total': str(total),
            'libres': str(libres),
            'ocupadas': str(ocupadas)
        }

        for stat_info in self.stats_widgets:
            widget = stat_info['widget']
            stat_type = stat_info['type']

            if stat_type in values:
                new_value = values[stat_type]
                # Actualizar el valor en el widget
                layout = widget.layout()
                if layout and layout.count() >= 2:
                    item = layout.itemAt(1)  # El segundo item es el valor
                    if item:
                        value_label = item.widget()
                        if isinstance(value_label, QLabel):
                            value_label.setText(new_value)
                            value_label.update()
                  # Forzar actualización del widget
                widget.update()
                widget.repaint()

    def update_stats_from_mesas(self):
        """Calcula y actualiza las estadísticas basándose en las mesas actuales"""
        if not self.mesas:
            # Actualizar estadísticas ultra-premium con valores en 0
            self.update_ultra_premium_stats()
            return

        # Calcular estadísticas reales
        zonas_unicas = set(mesa.zona for mesa in self.mesas)
        zonas_activas = len(zonas_unicas)
        total_mesas = len(self.mesas)
        ocupadas = len([mesa for mesa in self.mesas if mesa.estado == 'ocupada'])
        libres = total_mesas - ocupadas

        # Actualizar estadísticas ultra-premium (NO las compactas que causan el problema)
        self.update_ultra_premium_stats()

        # También actualizar la información de estado
        if hasattr(self, 'status_info'):
            self.status_info.setText(f"Mostrando {len(self.filtered_mesas)} de {total_mesas} mesas")

    def _on_zone_changed(self, zone: str):
        """Maneja el cambio de filtro de zona"""
        self.current_zone_filter = zone
        self.populate_grid()

    def _on_status_changed(self, status: str):
        """Maneja el cambio de filtro de estado"""
        self.current_status_filter = status
        self.populate_grid()

    def _guardar_datos_temporales(self):
        for mesa in self.mesas:
            if mesa.alias or mesa.personas_temporal is not None:
                self._datos_temporales[mesa.id] = {
                    'alias': mesa.alias,
                    'personas': mesa.personas_temporal
                }
            elif mesa.id in self._datos_temporales:
                del self._datos_temporales[mesa.id]

    def _restaurar_datos_temporales(self, mesas: List[Mesa]):
        for mesa in mesas:
            datos = self._datos_temporales.get(mesa.id)
            if datos:
                mesa.alias = datos.get('alias')
                mesa.personas_temporal = datos.get('personas')

    def _restaurar_datos_temporales_externo(self, mesas: List[Mesa], datos_temporales: dict):
        for mesa in mesas:
            datos = datos_temporales.get(mesa.id)
            if datos:
                mesa.alias = datos.get('alias')
                mesa.personas_temporal = datos.get('personas')

    def set_mesas(self, mesas: List[Mesa], datos_temporales: Optional[Dict] = None):
        self._guardar_datos_temporales()
        if datos_temporales is not None:
            self._restaurar_datos_temporales_externo(mesas, datos_temporales)
        else:
            self._restaurar_datos_temporales(mesas)
        self.mesas = mesas
        self.update_filtered_mesas()
        self.populate_grid()
        self.update_stats_from_mesas()

    def refresh_mesas(self):
        if self.tpv_service:
            nuevas_mesas = self.tpv_service.get_mesas()
            self._guardar_datos_temporales()
            self._restaurar_datos_temporales(nuevas_mesas)
            self.mesas = nuevas_mesas
        self.update_filtered_mesas()
        self.populate_grid()

    def update_filtered_mesas(self):
        """Actualiza la lista filtered_mesas según los filtros activos (zona, estado, búsqueda)."""
        if not self.mesas:
            self.filtered_mesas = []
            return
        # Filtro de zona
        if self.current_zone_filter and self.current_zone_filter != "Todas":
            mesas_zona = [m for m in self.mesas if m.zona == self.current_zone_filter]
        else:
            mesas_zona = self.mesas[:]
        # Filtro de estado
        if self.current_status_filter and self.current_status_filter != "Todos":
            mesas_estado = [m for m in mesas_zona if m.estado.lower() == self.current_status_filter.lower()]
        else:
            mesas_estado = mesas_zona
        # Filtro de búsqueda estricto
        search = self.search_input.text().strip().lower() if hasattr(self, 'search_input') else ""
        if search:
            self.filtered_mesas = [m for m in mesas_estado if search in str(m.numero).lower() or search in (m.zona or '').lower() or search in (m.alias or '').lower()]
        else:
            self.filtered_mesas = mesas_estado

    def populate_grid(self):
        # Forzar restauración de alias/personas temporales antes de poblar el grid
        self._restaurar_datos_temporales(self.filtered_mesas)
        # Limpiar layout existente
        self._clear_mesa_widgets()

        if not self.filtered_mesas:
            self._show_no_mesas_message()
            return

        # ✅ CÁLCULO DINÁMICO MEJORADO DE COLUMNAS
        cols = self._calculate_optimal_columns()

        # Crear un dict temporal para widgets existentes por id
        widgets_por_id = {w.mesa.id: w for w in self.mesa_widgets}
        self.mesa_widgets = []

        for i, mesa in enumerate(self.filtered_mesas):
            row = i // cols
            col = i % cols
            # Si ya existe un widget para esta mesa, actualizarlo
            if mesa.id in widgets_por_id:
                mesa_widget = widgets_por_id[mesa.id]
                mesa_widget.update_mesa(mesa)
            else:
                mesa_widget = MesaWidget(mesa)
                mesa_widget.mesa_clicked.connect(self.mesa_clicked.emit)
                mesa_widget.alias_changed.connect(self._on_alias_mesa_changed)
                mesa_widget.personas_changed.connect(self._on_personas_mesa_changed)
                mesa_widget.restaurar_original.connect(self.restaurar_estado_original_mesa)
            self.mesa_widgets.append(mesa_widget)
            self.mesas_layout.addWidget(mesa_widget, row, col)

        # Actualizar información de estado
        total_filtered = len(self.filtered_mesas)
        total_all = len(self.mesas)

        if total_filtered == total_all:
            status_text = f"Mostrando {total_all} mesa(s)"
        else:
            status_text = f"Mostrando {total_filtered} de {total_all} mesa(s)"

        self.status_info.setText(status_text)

    def _calculate_optimal_columns(self) -> int:
        """🧮 Calcula el número óptimo de columnas según el ancho disponible"""
        try:
            # Obtener ancho real del contenedor
            available_width = self.width()            # Si el widget no está completamente inicializado, usar un fallback inteligente
            if available_width <= 100:
                # Usar un valor por defecto robusto basado en resoluciones comunes
                from PyQt6.QtWidgets import QApplication
                try:
                    # Intentar obtener tamaño de la pantalla
                    screen = QApplication.primaryScreen()
                    if screen:
                        screen_geometry = screen.geometry()
                        available_width = max(1000, int(screen_geometry.width() * 0.7))
                    else:
                        available_width = 1200
                except:
                    available_width = 1200  # Fallback para pantallas HD

            # ✅ PARÁMETROS OPTIMIZADOS PARA MÁXIMO APROVECHAMIENTO
            widget_width = 220  # Ancho real del widget de mesa
            spacing = 15       # Espaciado entre widgets + márgenes
            padding = 60       # Padding total del contenedor (30px cada lado)

            # Calcular ancho útil disponible
            usable_width = available_width - padding

            # Calcular número de columnas que caben
            cols_fit = usable_width // (widget_width + spacing)

            # ✅ REGLAS DE OPTIMIZACIÓN INTELIGENTE
            # Mínimo 1 columna, máximo razonable 8 (para no hacer widgets demasiado pequeños)
            cols = max(1, min(cols_fit, 8))

            # ✅ AJUSTE INTELIGENTE SEGÚN NÚMERO DE MESAS
            total_mesas = len(self.filtered_mesas) if hasattr(self, 'filtered_mesas') else 0

            # Si hay pocas mesas, no usar todas las columnas posibles para mejor balance visual
            if total_mesas > 0:
                if total_mesas <= 3:
                    cols = min(cols, total_mesas)  # No más columnas que mesas
                elif total_mesas <= 6:
                    cols = min(cols, 3)  # Máximo 3 columnas para 4-6 mesas                elif total_mesas <= 12:
                    cols = min(cols, 4)  # Máximo 4 columnas para 7-12 mesas
                # Para más mesas, usar el cálculo completo

            return cols

        except Exception as e:
            logger.error(f"Error calculando columnas óptimas: {e}")
            return 3  # Fallback seguro

    def _clear_mesa_widgets(self):
        """Limpia todos los widgets de mesa del layout"""
        try:
            # Limpiar widgets de mesas
            self.mesa_widgets.clear()

            # Limpiar layout
            while self.mesas_layout.count():
                child = self.mesas_layout.takeAt(0)
                if child and child.widget():
                    widget = child.widget()
                    if widget:
                        widget.deleteLater()

        except Exception as e:
            logger.error(f"Error limpiando widgets de mesa: {e}")

    def _show_no_mesas_message(self):
        """Muestra mensaje cuando no hay mesas que mostrar"""
        try:
            from PyQt6.QtWidgets import QFrame, QVBoxLayout, QLabel, QPushButton, QHBoxLayout

            # Container para el mensaje
            message_container = QFrame()
            message_container.setStyleSheet("""
                QFrame {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                        stop:0 #f8f9fa, stop:1 #e9ecef);
                    border: 2px dashed #dee2e6;
                    border-radius: 16px;
                    padding: 30px;
                    margin: 20px;
                }
            """)

            container_layout = QVBoxLayout(message_container)
            container_layout.setAlignment(Qt.AlignmentFlag.AlignCenter)
            container_layout.setSpacing(16)

            # Determinar mensaje según filtros
            icon_text = "🔍"
            title_text = "No se encontraron mesas"
            subtitle_text = "No hay mesas que coincidan con los filtros aplicados"

            # Icono grande
            icon_label = QLabel(icon_text)
            icon_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            icon_label.setStyleSheet("""
                QLabel {
                    font-size: 48px;
                    color: #6c757d;
                    margin: 10px;
                }
            """)
            container_layout.addWidget(icon_label)

            # Título principal
            title_label = QLabel(title_text)
            title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            title_label.setStyleSheet("""
                QLabel {
                    font-size: 20px;
                    font-weight: bold;
                    color: #495057;
                    margin: 8px;
                }
            """)
            container_layout.addWidget(title_label)

            # Subtítulo
            subtitle_label = QLabel(subtitle_text)
            subtitle_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            subtitle_label.setStyleSheet("""
                QLabel {
                    font-size: 14px;
                    color: #6c757d;
                    margin: 4px;
                }
            """)
            container_layout.addWidget(subtitle_label)

            # Agregar al layout principal ocupando todo el espacio
            self.mesas_layout.addWidget(message_container, 0, 0, 1, 4)

        except Exception as e:
            logger.error(f"Error mostrando mensaje de no mesas: {e}")

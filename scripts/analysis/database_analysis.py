#!/usr/bin/env python3
"""
An√°lisis Completo de Base de Datos Hefest
========================================

Verifica si los datos son reales o de f√°brica (factory data)
y analiza la integridad de las conexiones del m√≥dulo inventario.
"""

import sqlite3
import os
from datetime import datetime

class HefestDataAnalyzer:    def __init__(self):
        self.db_path = os.path.join(os.path.dirname(__file__), '..', '..', 'data', 'hefest.db')
        self.db_path = os.path.abspath(self.db_path)
        self.conn = None
        
    def connect(self):
        """Conectar a la base de datos"""
        try:
            self.conn = sqlite3.connect(self.db_path)
            self.conn.row_factory = sqlite3.Row
            return True
        except Exception as e:
            print(f"‚ùå Error conectando: {e}")
            return False
    
    def analyze_data_type(self):
        """Analizar si los datos son reales o de f√°brica"""
        print("üîç AN√ÅLISIS DE TIPO DE DATOS")
        print("=" * 50)
        
        cursor = self.conn.cursor()
        
        # An√°lisis por tabla
        tables_analysis = {}
        
        # 1. Usuarios
        cursor.execute("SELECT COUNT(*) as total, COUNT(CASE WHEN nombre LIKE '%admin%' OR nombre LIKE '%test%' OR nombre LIKE '%demo%' THEN 1 END) as factory FROM usuarios")
        users_data = cursor.fetchone()
        
        # 2. Productos
        cursor.execute("SELECT COUNT(*) as total, COUNT(CASE WHEN precio = 0 OR precio IS NULL THEN 1 END) as zero_price FROM productos")
        products_data = cursor.fetchone()
        
        # 3. Habitaciones
        cursor.execute("SELECT COUNT(*) as total, COUNT(CASE WHEN precio_base = 0 OR precio_base IS NULL THEN 1 END) as zero_price FROM habitaciones")
        rooms_data = cursor.fetchone()
        
        # 4. Reservas
        cursor.execute("SELECT COUNT(*) as total FROM reservas")
        reservations_data = cursor.fetchone()
        
        # 5. Categorias
        cursor.execute("SELECT COUNT(*) as total FROM categorias")
        categories_data = cursor.fetchone()
        
        # 6. Proveedores
        cursor.execute("SELECT COUNT(*) as total FROM proveedores")
        suppliers_data = cursor.fetchone()
        
        # Mostrar an√°lisis
        print(f"üë• USUARIOS: {users_data['total']} total")
        print(f"   ‚Ä¢ Factory/Demo: {users_data['factory']} ({(users_data['factory']/max(users_data['total'],1)*100):.1f}%)")
        print(f"   ‚Ä¢ Tipo: {'üè≠ FACTORY DATA' if users_data['factory'] >= users_data['total']/2 else 'üë§ DATOS REALES'}")
        
        print(f"\nüì¶ PRODUCTOS: {products_data['total']} total")
        if products_data['total'] > 0:
            print(f"   ‚Ä¢ Precio cero/nulo: {products_data['zero_price']} ({(products_data['zero_price']/products_data['total']*100):.1f}%)")
            print(f"   ‚Ä¢ Tipo: {'üè≠ FACTORY DATA' if products_data['zero_price'] >= products_data['total']/2 else 'üí∞ DATOS REALES'}")
        else:
            print("   ‚Ä¢ Estado: ‚ö†Ô∏è VAC√çO - NECESITA DATOS")
        
        print(f"\nüè® HABITACIONES: {rooms_data['total']} total")
        if rooms_data['total'] > 0:
            print(f"   ‚Ä¢ Precio cero/nulo: {rooms_data['zero_price']} ({(rooms_data['zero_price']/rooms_data['total']*100):.1f}%)")
            print(f"   ‚Ä¢ Tipo: {'üè≠ FACTORY DATA' if rooms_data['zero_price'] >= rooms_data['total']/2 else 'üí∞ DATOS REALES'}")
        else:
            print("   ‚Ä¢ Estado: ‚ö†Ô∏è VAC√çO - NECESITA DATOS")
        
        print(f"\nüìÖ RESERVAS: {reservations_data['total']} total")
        print(f"   ‚Ä¢ Estado: {'‚ö†Ô∏è VAC√çO' if reservations_data['total'] == 0 else '‚úÖ CON DATOS'}")
        
        print(f"\nüè∑Ô∏è CATEGOR√çAS: {categories_data['total']} total")
        print(f"   ‚Ä¢ Estado: {'‚ö†Ô∏è VAC√çO' if categories_data['total'] == 0 else '‚úÖ CON DATOS'}")
        
        print(f"\nüöö PROVEEDORES: {suppliers_data['total']} total")
        print(f"   ‚Ä¢ Estado: {'‚ö†Ô∏è VAC√çO' if suppliers_data['total'] == 0 else '‚úÖ CON DATOS'}")
        
        return {
            'usuarios': users_data,
            'productos': products_data,
            'habitaciones': rooms_data,
            'reservas': reservations_data,
            'categorias': categories_data,
            'proveedores': suppliers_data
        }
    
    def analyze_inventory_connections(self):
        """Analizar conexiones del m√≥dulo inventario"""
        print("\nüîó AN√ÅLISIS DE CONEXIONES - M√ìDULO INVENTARIO")
        print("=" * 60)
        
        cursor = self.conn.cursor()
        
        # Verificar integridad referencial
        print("üìã INTEGRIDAD REFERENCIAL:")
        print("-" * 30)
        
        # 1. Productos -> Categor√≠as
        cursor.execute("""
            SELECT COUNT(*) as total_productos,
                   COUNT(CASE WHEN categoria IS NOT NULL AND categoria != '' THEN 1 END) as con_categoria,
                   COUNT(CASE WHEN p.categoria = c.nombre THEN 1 END) as categoria_valida
            FROM productos p
            LEFT JOIN categorias c ON p.categoria = c.nombre
        """)
        product_cat = cursor.fetchone()
        
        print(f"üì¶ Productos ‚Üî Categor√≠as:")
        if product_cat['total_productos'] > 0:
            print(f"   ‚Ä¢ Total productos: {product_cat['total_productos']}")
            print(f"   ‚Ä¢ Con categor√≠a: {product_cat['con_categoria']}")
            print(f"   ‚Ä¢ Categor√≠a v√°lida: {product_cat['categoria_valida']}")
            print(f"   ‚Ä¢ Integridad: {(product_cat['categoria_valida']/product_cat['total_productos']*100):.1f}%")
        else:
            print("   ‚Ä¢ ‚ö†Ô∏è No hay productos para verificar")
        
        # 2. Movimientos stock -> Productos
        cursor.execute("""
            SELECT COUNT(*) as total_movimientos,
                   COUNT(CASE WHEN p.id IS NOT NULL THEN 1 END) as producto_valido
            FROM movimientos_stock ms
            LEFT JOIN productos p ON ms.producto_id = p.id
        """)
        stock_prod = cursor.fetchone()
        
        print(f"\nüìä Movimientos Stock ‚Üî Productos:")
        if stock_prod['total_movimientos'] > 0:
            print(f"   ‚Ä¢ Total movimientos: {stock_prod['total_movimientos']}")
            print(f"   ‚Ä¢ Producto v√°lido: {stock_prod['producto_valido']}")
            print(f"   ‚Ä¢ Integridad: {(stock_prod['producto_valido']/stock_prod['total_movimientos']*100):.1f}%")
        else:
            print("   ‚Ä¢ ‚ö†Ô∏è No hay movimientos de stock")
        
        # 3. Verificar estructura de tablas inventario
        print(f"\nüóÇÔ∏è ESTRUCTURA TABLAS INVENTARIO:")
        print("-" * 35)
        
        inventory_tables = ['productos', 'categorias', 'proveedores', 'movimientos_stock']
        
        for table in inventory_tables:
            cursor.execute(f"PRAGMA table_info({table})")
            columns = cursor.fetchall()
            print(f"\nüìã Tabla '{table}':")
            for col in columns:
                nullable = "NULL" if col['notnull'] == 0 else "NOT NULL"
                default = f" DEFAULT {col['dflt_value']}" if col['dflt_value'] else ""
                print(f"   ‚Ä¢ {col['name']} ({col['type']}) {nullable}{default}")
    
    def suggest_factory_data(self):
        """Sugerir datos de f√°brica para testing"""
        print("\nüè≠ SUGERENCIAS DE DATOS DE F√ÅBRICA")
        print("=" * 50)
        
        suggestions = {
            'categorias': [
                "('Bebidas', 'Refrescos, zumos, agua')",
                "('Alimentaci√≥n', 'Comida y snacks')",
                "('Limpieza', 'Productos de limpieza')",
                "('Amenities', 'Art√≠culos de cortes√≠a')",
                "('Textil', 'Ropa de cama y toallas')"
            ],
            'proveedores': [
                "('PROVEEDOR DEMO 1', 'demo1@test.com', '000-000-001', 'Calle Demo 1')",
                "('PROVEEDOR DEMO 2', 'demo2@test.com', '000-000-002', 'Calle Demo 2')",
                "('PROVEEDOR DEMO 3', 'demo3@test.com', '000-000-003', 'Calle Demo 3')"
            ],
            'productos': [
                "('Agua Mineral 500ml', 0.50, 0, 'Bebidas')",
                "('Toalla Ba√±o', 15.00, 0, 'Textil')",
                "('Champ√∫ Demo', 3.00, 0, 'Amenities')",
                "('Detergente', 8.00, 0, 'Limpieza')",
                "('Sandwich Demo', 4.50, 0, 'Alimentaci√≥n')"
            ]
        }
        
        for table, data_list in suggestions.items():
            print(f"\nüìã {table.upper()}:")
            print("-" * 20)
            for item in data_list:
                print(f"   ‚Ä¢ {item}")
    
    def check_inventory_module_compatibility(self):
        """Verificar compatibilidad con el m√≥dulo de inventario"""
        print("\nüîß COMPATIBILIDAD M√ìDULO INVENTARIO")
        print("=" * 50)
        
        cursor = self.conn.cursor()
        
        # Verificar campos esperados por el m√≥dulo
        expected_fields = {
            'productos': ['id', 'nombre', 'precio', 'stock', 'categoria'],
            'categorias': ['id', 'nombre'],
            'proveedores': ['id', 'nombre', 'email', 'telefono'],
            'movimientos_stock': ['id', 'producto_id', 'tipo', 'cantidad', 'fecha']
        }
        
        compatibility_score = 0
        total_checks = 0
        
        for table, fields in expected_fields.items():
            cursor.execute(f"PRAGMA table_info({table})")
            existing_columns = [col['name'] for col in cursor.fetchall()]
            
            print(f"\nüìã Tabla '{table}':")
            
            for field in fields:
                total_checks += 1
                if field in existing_columns:
                    print(f"   ‚úÖ {field}")
                    compatibility_score += 1
                else:
                    print(f"   ‚ùå {field} - FALTANTE")
        
        compatibility_percent = (compatibility_score / total_checks * 100)
        
        print(f"\nüìä PUNTUACI√ìN COMPATIBILIDAD:")
        print(f"   ‚Ä¢ Campos encontrados: {compatibility_score}/{total_checks}")
        print(f"   ‚Ä¢ Porcentaje: {compatibility_percent:.1f}%")
        
        if compatibility_percent >= 90:
            print("   ‚Ä¢ Estado: ‚úÖ EXCELENTE COMPATIBILIDAD")
        elif compatibility_percent >= 70:
            print("   ‚Ä¢ Estado: ‚ö†Ô∏è BUENA COMPATIBILIDAD - Revisar campos faltantes")
        else:
            print("   ‚Ä¢ Estado: ‚ùå PROBLEMAS DE COMPATIBILIDAD - Requiere ajustes")
        
        return compatibility_percent

def main():
    print("üîç AN√ÅLISIS COMPLETO - BASE DE DATOS HEFEST")
    print("=" * 60)
    print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    analyzer = HefestDataAnalyzer()
    
    if not analyzer.connect():
        return
    
    try:
        # 1. An√°lisis de tipo de datos
        data_analysis = analyzer.analyze_data_type()
        
        # 2. An√°lisis de conexiones inventario
        analyzer.analyze_inventory_connections()
        
        # 3. Verificar compatibilidad m√≥dulo
        compatibility = analyzer.check_inventory_module_compatibility()
        
        # 4. Sugerir datos de f√°brica
        analyzer.suggest_factory_data()
        
        # Resumen final
        print("\nüéØ RESUMEN EJECUTIVO")
        print("=" * 30)
        
        empty_tables = []
        if data_analysis['productos']['total'] == 0:
            empty_tables.append('productos')
        if data_analysis['categorias']['total'] == 0:
            empty_tables.append('categorias')
        if data_analysis['proveedores']['total'] == 0:
            empty_tables.append('proveedores')
        
        if empty_tables:
            print(f"‚ö†Ô∏è  Tablas vac√≠as: {', '.join(empty_tables)}")
            print("üìã Recomendaci√≥n: Poblar con datos de f√°brica")
        else:
            print("‚úÖ Todas las tablas tienen datos")
        
        print(f"üîß Compatibilidad m√≥dulo: {compatibility:.1f}%")
        
        if compatibility >= 90:
            print("üéâ LISTO para implementar funcionalidades completas")
        else:
            print("‚ö†Ô∏è  Revisar estructura antes de implementar")
        
    except Exception as e:
        print(f"‚ùå Error durante an√°lisis: {e}")
    finally:
        if analyzer.conn:
            analyzer.conn.close()

if __name__ == "__main__":
    main()
